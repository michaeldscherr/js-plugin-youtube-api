{"version":3,"file":null,"sources":["../src/youtube-api.js"],"sourcesContent":["if (typeof Object.assign !== 'function') {\n    Object.assign = function(target) {\n        if (target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        target = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== null) {\n                for (var key in source) {\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n}\n\nwindow.youtubeClient = (function(window, document) {\n\n    // defaults for plugin\n    const defaults = {\n        onAPIReady: () => {},\n        onStateChange: () => {},\n        playerVars: {\n            autoplay: 0,\n            controls: 0,\n            loop: 1,\n            modestbranding: 1,\n            showinfo: 0,\n            wmode: 'opaque'\n        }\n    };\n\n    /**\n        * youtube api that gets injected\n        * into the youtube client instance\n    */\n    const youtubeAPI = function(reference, options) {\n\n        const elem = reference.elem;\n        const videoid = reference.videoid;\n        let player = null;\n\n        // return the player\n        let getPlayer = () => player;\n\n        /**\n            * build the youtube player\n            * set variables\n            * bind the events\n        */\n        let build = function () {\n            player = new window.YT.Player(elem, {\n                videoId: videoid,\n                playerVars: options.playerVars,\n                events: {\n                    onReady: options.onAPIReady,\n                    onStateChange: (state) => options.onStateChange(state)\n                }\n            });\n        };\n\n        return {\n            build,\n            getPlayer\n        };\n    };\n\n    // set to false initially\n    let scriptLoaded = false;\n\n    /**\n        this function loads the YouTube API script\n        the script generated will trigger the\n        `window.onYouTubeIframeAPIReady` function\n    */\n    function loadAPIScript() {\n        if (scriptLoaded === true) {\n            return;\n        }\n        const firstScriptTag = document.getElementsByTagName('script')[0];\n        let tag = document.createElement('script');\n        tag.src = 'https://www.youtube.com/iframe_api';\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n        scriptLoaded = true;\n    }\n\n    const YoutubeClient = function(elem, options) {\n        this.options = Object.assign({}, defaults, options);\n        this.elem = elem;\n        this.videoid = elem.getAttribute('data-yt-videoid');\n        this.api = new youtubeAPI(this, this.options);\n    };\n\n    /**\n        destroy the current\n        player instance\n    */\n    YoutubeClient.prototype.destroy = function() {\n        const player = this.api.getPlayer();\n        player.destroy();\n    };\n\n    /**\n        * on init, build the player\n        * from the api\n    */\n    YoutubeClient.prototype.init = function() {\n        this.api.build();\n    };\n\n    /**\n        * simple factory function to return\n        * a new `YoutubeClient` instance to\n        * each element passed in\n    */\n    const factory = function(elems, options = {}) {\n        const cb = () => {\n            if (!elems.length) {\n                elems = [...elems];\n            }\n            elems.forEach((elem) => {\n                if (typeof options === 'string') {\n                    if (elem.YouTubeClient && typeof elem.YouTubeClient[options] !== 'function') {\n                        throw new Error(`\"${options}\" method is not defined on ${elem}`);\n                    }\n                    return elem.YouTubeClient[options]();\n                }\n                if (elem.youtubeClientInitialized === true) {\n                    return true;\n                }\n                const youtubeClient = new YoutubeClient(elem, options);\n                youtubeClient.init();\n                elem.youtubeClientInitialized = true;\n                elem.YouTubeClient = youtubeClient;\n                return elem.YouTubeClient;\n            });\n        };\n        if (scriptLoaded) {\n            cb();\n            return;\n        }\n        window.onYouTubeIframeAPIReady = () => {\n            cb();\n        };\n        loadAPIScript();\n    };\n\n    // return just the factory, everything else is private\n    return factory;\n\n})(window, document);\n\n(function(window, document) {\n\n    // check for document ready state\n    document.onreadystatechange = () => {\n        if (document.readyState === 'complete') {\n\n            // select elements, initialize plugin\n            const elems = document.querySelectorAll('[data-yt-cli=\"true\"]');\n            window.youtubeClient(elems);\n\n        }\n    };\n\n})(window, document);\n"],"names":["Object","assign","target","TypeError","index","arguments","length","source","key","prototype","hasOwnProperty","call","window","youtubeClient","document","loadAPIScript","scriptLoaded","const","firstScriptTag","getElementsByTagName","tag","createElement","src","parentNode","insertBefore","defaults","onAPIReady","onStateChange","playerVars","autoplay","controls","loop","modestbranding","showinfo","wmode","youtubeAPI","reference","options","elem","videoid","player","getPlayer","build","YT","Player","videoId","events","onReady","state","YoutubeClient","this","getAttribute","api","destroy","init","factory","elems","cb","forEach","YouTubeClient","Error","youtubeClientInitialized","onYouTubeIframeAPIReady","onreadystatechange","readyState","querySelectorAll"],"mappings":"AAA6B,kBAAlBA,QAAOC,SACdD,OAAOC,OAAS,SAASC,kBACrB,IAAe,OAAXA,EACA,KAAM,IAAIC,WAAU,6CAExBD,GAASF,OAAOE,EAChB,KAAK,GAAIE,GAAQ,EAAGA,EAAQC,UAAUC,OAAQF,IAAS,CACnD,GAAIG,GAASF,EAAUD,EACvB,IAAe,OAAXG,EACA,IAAK,GAAIC,KAAOD,GACRP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAC7CN,EAAOM,GAAOD,EAAOC,IAKrC,MAAON,KAIfU,OAAOC,cAAgB,SAAUD,EAAQE,GA2DrC,QAASC,KACL,GAAIC,KAAiB,EAArB,CAGAC,GAAMC,GAAiBJ,EAASK,qBAAqB,UAAU,GAC3DC,EAAMN,EAASO,cAAc,SACjCD,GAAIE,IAAM,qCACVJ,EAAeK,WAAWC,aAAaJ,EAAKF,GAC5CF,GAAe,GAhEnBC,GAAMQ,IACFC,WAAY,aACZC,cAAe,aACfC,YACIC,SAAU,EACVC,SAAU,EACVC,KAAM,EACNC,eAAgB,EAChBC,SAAU,EACVC,MAAO,WAQTC,EAAa,SAASC,EAAWC,GAEnCpB,GAAMqB,GAAOF,EAAUE,KACjBC,EAAUH,EAAUG,QACtBC,EAAS,KAGTC,EAAY,iBAAMD,IAOlBE,EAAQ,WACRF,EAAS,GAAI5B,GAAO+B,GAAGC,OAAON,GAC1BO,QAASN,EACTX,WAAYS,EAAQT,WACpBkB,QACIC,QAASV,EAAQX,WACjBC,cAAe,SAACqB,SAAUX,GAAQV,cAAcqB,OAK5D,QACIN,MAAAA,EACAD,UAAAA,IAKJzB,GAAe,EAkBbiC,EAAgB,SAASX,EAAMD,GACjCa,KAAKb,QAAUrC,OAAOC,UAAWwB,EAAUY,GAC3Ca,KAAKZ,KAAOA,EACZY,KAAKX,QAAUD,EAAKa,aAAa,mBACjCD,KAAKE,IAAM,GAAIjB,GAAWe,KAAMA,KAAKb,SAOzCY,GAAcxC,UAAU4C,QAAU,WAC9BpC,GAAMuB,GAASU,KAAKE,IAAIX,WACxBD,GAAOa,WAOXJ,EAAcxC,UAAU6C,KAAO,WAC3BJ,KAAKE,IAAIV,QAQbzB,IAAMsC,GAAU,SAASC,EAAOnB,qBAC5BpB,IAAMwC,GAAK,WACFD,EAAMlD,SACPkD,YAAYA,IAEhBA,EAAME,QAAQ,SAACpB,GACX,GAAuB,gBAAZD,GAAsB,CAC7B,GAAIC,EAAKqB,eAAwD,kBAAhCrB,GAAKqB,cAActB,GAChD,KAAM,IAAIuB,OAAM,IAAIvB,gCAAqCC,EAE7D,OAAOA,GAAKqB,cAActB,KAE9B,GAAIC,EAAKuB,4BAA6B,EAClC,OAAO,CAEX5C,IAAMJ,GAAgB,GAAIoC,GAAcX,EAAMD,EAI9C,OAHAxB,GAAcyC,OACdhB,EAAKuB,0BAA2B,EAChCvB,EAAKqB,cAAgB9C,EACdyB,EAAKqB,gBAGpB,OAAI3C,OACAyC,MAGJ7C,EAAOkD,wBAA0B,WAC7BL,SAEJ1C,MAIJ,OAAOwC,IAER3C,OAAQE,UAEX,SAAUF,EAAQE,GAGdA,EAASiD,mBAAqB,WAC1B,GAA4B,aAAxBjD,EAASkD,WAA2B,CAGpC/C,GAAMuC,GAAQ1C,EAASmD,iBAAiB,uBACxCrD,GAAOC,cAAc2C,MAK9B5C,OAAQE"}